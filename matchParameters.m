%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% kms = matchkms_newCriteria(model_data,org_name)
% Matchs the model EC numbers and substrates to the BRENDA database, to
% return the corresponding kms for each reaction.
%
% INPUT:    Model data structure (generated by getECnumbers.m)
% OUTPUTS:  kms, which contains:
%           *forw.kms:   kcat values for the forward reactions (mxn)
%           *forw.org_s:   Number of matches for organism - substrate in
%                          forward reaction (mxn)
%           *forw.rest_s:  Number of matches for any organism - substrate
%                          in forward reaction (mxn)
%           *forw.org_ns:  Number of matches for organism - any substrate
%                          in forward reaction (mxn)
%           *forw.rest_ns: Number of matches for any organism - any
%                          substrate in forward reaction (mxn)
%           *forw.org_sa:  Number of matches for organism - using s.a.
%                          in forward reaction (mxn)
%           *forw.rest_sa: Number of matches for any organism - using s.a.
%                          in forward reaction (mxn)
%           *back.kms:   kcat values for the backward reactions (mxn)
%           *back.org_s:   Number of matches for organism - substrate in
%                          backwards reaction (mxn)
%           *back.rest_s:  Number of matches for any organism - substrate
%                          in backwards reaction (mxn)
%           *back.org_ns:  Number of matches for organism - any substrate
%                          in backwards reaction (mxn)
%           *back.rest_ns: Number of matches for any organism - any
%                          substrate in backwards reaction (mxn)
%           *back.org_sa:  Number of matches for organism - using s.a.
%                          in backwards reaction (mxn)
%           *back.rest_sa: Number of matches for any organism - using s.a.
%                          in backwards reaction (mxn)
%           *tot.queries:  The total amount of ECs matched (1x1)
%           *tot.org_s:    The amount of ECs matched for the organism & the
%                          substrate (1x1)
%           *tot.rest_s:   The amount of ECs matched for any organism & the
%                          substrate (1x1)
%           *tot.org_ns:   The amount of ECs matched for the organism & any
%                          substrate (1x1)
%           *tot.rest_ns:  The amount of ECs matched for any organism & any
%                          substrate (1x1)
%           *tot.org_sa:   The amount of ECs matched for the organism & 
%                          using s.a. (1x1)
%           *tot.rest_sa:  The amount of ECs matched for any organism & 
%                          using s.a. (1x1)
% 
% Ivan Domenzain.      Last edited: 2017-12-14
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function kms = matchkms_AVLANT(model_data, org_name)
%Load BRENDA data:
cd ../../Databases
kcat_file     = 'max_KCAT.txt';
SA_file       = 'max_SA.txt';
MW_file       = 'max_MW.txt';
fID           = fopen(kcat_file);
BRENDA        = textscan(fID,'%s %s %s %f  %s','delimiter','\t');
BRENDA{4}     = BRENDA{4};   %[1/s] -> [1/h]
fclose(fID);
%Split string for each organism in the BRENDA data {name, taxonomy, KEGG code}
BRENDA{3}     = cellfun(@stringSplit, BRENDA{3});
%Creates a cell with all the SA*Mw values (corresponding to the same EC#
%and organism).
SA_cell       = SA_BRENDA(SA_file,MW_file);
%Creates a Structure with KEGG codes for organisms, names and phylogenetic 
%distance matrix and extract the organism index in the KEGG struct
TaxDistStruct =  KEGG_struct(true);
org_index     = find_inKEGG(org_name,phylDistStruct.names);
%Extract relevant info from model_data:
substrates = model_data.substrates;
products   = model_data.products;
EC_numbers = model_data.EC_numbers;
model      = model_data.model;
molWeights = model_data.MWs;
%Create initially empty outputs:
[mM,nM]          = size(EC_numbers);
KCAT.subs.org_s  = zeros(mM,nM);
KCAT.subs.rest_s = zeros(mM,nM);
KCAT.prod.org_s  = zeros(mM,nM);
KCAT.prod.rest_s = zeros(mM,nM);
KM.subs.org_s    = zeros(mM,nM);
KM.subs.rest_s   = zeros(mM,nM);
KM.prod.org_s    = zeros(mM,nM);
KM.prod.rest_s   = zeros(mM,nM);

KCAT.tot.queries  = 0;
KCAT.tot.org_s    = 0;
KCAT.tot.rest_s   = 0;
KCAT.tot.wc0      = 0;
KCAT.tot.wc1      = 0;
KCAT.tot.wc2      = 0;
KCAT.tot.wc3      = 0;
KCAT.tot.wc4      = 0;
KCAT.tot.matrix   = zeros(2,5);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function string_cells = stringSplit(cell_array)
        string_cells = {strsplit(cell_array,'//')};
        string_cells = string_cells{1}(1);
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function org_index = find_inKEGG(org_name,names)
    org_index      = find(strcmpi(org_name,names));
    if isempty(org_index)
        i=1;
        while isempty(org_index) && i<length(names)
            str = names{i};
            if strcmpi(org_name(1:strfind(org_name,' ')-1),...
                str(1:strfind(str,' ')-1))
                org_index = i;
            end
            i = i+1;
        end
        if isempty(org_index);org_index = '*';end
    end
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function phylDistStruct =  KEGG_struct(unicellular)
    keggPath='/Volumes/ftp.bioinformatics.jp/kegg/genes/misc';
    cd ../Matlab_Module/get_enzyme_data
    phylDistStruct       = UpdatePhylDist_(keggPath,unicellular);
    phylDistStruct.ids   = transpose(phylDistStruct.ids);
    phylDistStruct.names = transpose(phylDistStruct.names);
    
    for i=1:length(phylDistStruct.names)
        pos = strfind(phylDistStruct.names{i}, ' (');
        if ~isempty(pos)
            phylDistStruct.names{i} = phylDistStruct.names{i}(1:pos-1);
        end
    end
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function SA_cell = SA_BRENDA(SA_file,MW_file )

    fID   = fopen(SA_file);
    SA    = textscan(fID,'%s %s %s %f  %s','delimiter','\t');
    SA{4} = SA{4};   
    fclose(fID);

    fID   = fopen(MW_file);
    MW    = textscan(fID,'%s %s %s %f  %s','delimiter','\t');
    MW{4} = MW{4};   
    fclose(fID);
    
    SA{3}   = cellfun(@stringSplit, SA{3});
    MW{3}   = cellfun(@stringSplit, MW{3});
    for i=1:3
        SA_cell{i} = [];
    end
    previousEC = []; EC_indexes = [];
    for i=1:length(SA{1})
        %Gets the indexes of the EC repetitions in the MW cell for every
        %new (different) EC
        if ~strcmpi(SA{1}(i), previousEC)
            EC_indexes = find(strcmpi(SA{1}(i),MW{1}));
        end
        % just looks for the first match because just the maximal value for
        % each EC# / Orgaism is reported on the file
        mwEC{1}   = MW{3}(EC_indexes); mwEC{2} = MW{4}(EC_indexes);
        org_index = find(strcmpi(SA{3}(i),mwEC{1}),1);
        if ~isempty(org_index)
            SA_cell{1} = [SA_cell{1};SA{1}(i)];
            SA_cell{2} = [SA_cell{2};SA{3}(i)];
            value      = SA{4}(i)* mwEC{2}(org_index)*(60/1000); %[1/hr]
            SA_cell{3} = [SA_cell{3}; value];
        end
        previousEC = SA{1}(i);
    end
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

